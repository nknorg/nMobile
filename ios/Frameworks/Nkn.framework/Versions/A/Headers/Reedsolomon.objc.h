// Objective-C API for talking to github.com/nknorg/reedsolomon Go package.
//   gobind -lang=objc github.com/nknorg/reedsolomon
//
// File is generated by gobind. Do not edit.

#ifndef __Reedsolomon_H__
#define __Reedsolomon_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class ReedsolomonBytesArray;
@class ReedsolomonStreamReadError;
@class ReedsolomonStreamWriteError;
@protocol ReedsolomonEncoder;
@class ReedsolomonEncoder;
@protocol ReedsolomonStreamEncoder;
@class ReedsolomonStreamEncoder;

@protocol ReedsolomonEncoder <NSObject>
// skipped method Encoder.Encode with unsupported parameter or return types

- (BOOL)encodeBytesArray:(ReedsolomonBytesArray* _Nullable)shards error:(NSError* _Nullable* _Nullable)error;
// skipped method Encoder.Join with unsupported parameter or return types

- (BOOL)joinBytesArray:(NSData* _Nullable)dst shards:(ReedsolomonBytesArray* _Nullable)shards error:(NSError* _Nullable* _Nullable)error;
// skipped method Encoder.Reconstruct with unsupported parameter or return types

- (BOOL)reconstructBytesArray:(ReedsolomonBytesArray* _Nullable)shards error:(NSError* _Nullable* _Nullable)error;
// skipped method Encoder.ReconstructData with unsupported parameter or return types

- (BOOL)reconstructDataBytesArray:(ReedsolomonBytesArray* _Nullable)shards error:(NSError* _Nullable* _Nullable)error;
// skipped method Encoder.Split with unsupported parameter or return types

- (ReedsolomonBytesArray* _Nullable)splitBytesArray:(NSData* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
// skipped method Encoder.Update with unsupported parameter or return types

- (BOOL)updateBytesArray:(ReedsolomonBytesArray* _Nullable)shards newDatashards:(ReedsolomonBytesArray* _Nullable)newDatashards error:(NSError* _Nullable* _Nullable)error;
// skipped method Encoder.Verify with unsupported parameter or return types

- (BOOL)verifyBytesArray:(ReedsolomonBytesArray* _Nullable)shards ret0_:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
@end

@protocol ReedsolomonStreamEncoder <NSObject>
// skipped method StreamEncoder.Encode with unsupported parameter or return types

// skipped method StreamEncoder.Join with unsupported parameter or return types

// skipped method StreamEncoder.Reconstruct with unsupported parameter or return types

// skipped method StreamEncoder.Split with unsupported parameter or return types

// skipped method StreamEncoder.Verify with unsupported parameter or return types

@end

/**
 * BytesArray is a gomobile compatible wrapper of [][]byte.
 */
@interface ReedsolomonBytesArray : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewBytesArray creates an empty BytesArray with length n.
 */
- (nullable instancetype)init:(long)n;
/**
 * Append appends an element to the BytesArray and increments its length.
 */
- (void)append:(NSData* _Nullable)b;
/**
 * Get returns an element of the BytesArray.
 */
- (NSData* _Nullable)get:(long)i;
/**
 * Len returns the bytes array length.
 */
- (long)len;
/**
 * Set sets an element of the BytesArray.
 */
- (void)set:(long)i b:(NSData* _Nullable)b;
/**
 * Set nil of the BytesArray.
 */
- (void)setNil:(long)i;
@end

/**
 * StreamReadError is returned when a read error is encountered
that relates to a supplied stream.
This will allow you to find out which reader has failed.
 */
@interface ReedsolomonStreamReadError : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSError* _Nullable err;
@property (nonatomic) long stream;
/**
 * Error returns the error as a string
 */
- (NSString* _Nonnull)error;
/**
 * String returns the error as a string
 */
- (NSString* _Nonnull)string;
@end

/**
 * StreamWriteError is returned when a write error is encountered
that relates to a supplied stream. This will allow you to
find out which reader has failed.
 */
@interface ReedsolomonStreamWriteError : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSError* _Nullable err;
@property (nonatomic) long stream;
/**
 * Error returns the error as a string
 */
- (NSString* _Nonnull)error;
/**
 * String returns the error as a string
 */
- (NSString* _Nonnull)string;
@end

@interface Reedsolomon : NSObject
/**
 * ErrInvShardNum will be returned by New, if you attempt to create
an Encoder where either data or parity shards is zero or less.
 */
+ (NSError* _Nullable) errInvShardNum;
+ (void) setErrInvShardNum:(NSError* _Nullable)v;

/**
 * ErrInvalidInput is returned if invalid input parameter of Update.
 */
+ (NSError* _Nullable) errInvalidInput;
+ (void) setErrInvalidInput:(NSError* _Nullable)v;

/**
 * ErrMaxShardNum will be returned by New, if you attempt to create an
Encoder where data and parity shards are bigger than the order of
GF(2^8).
 */
+ (NSError* _Nullable) errMaxShardNum;
+ (void) setErrMaxShardNum:(NSError* _Nullable)v;

/**
 * ErrReconstructMismatch is returned by the StreamEncoder, if you supply
"valid" and "fill" streams on the same index.
Therefore it is impossible to see if you consider the shard valid
or would like to have it reconstructed.
 */
+ (NSError* _Nullable) errReconstructMismatch;
+ (void) setErrReconstructMismatch:(NSError* _Nullable)v;

/**
 * ErrReconstructRequired is returned if too few data shards are intact and a
reconstruction is required before you can successfully join the shards.
 */
+ (NSError* _Nullable) errReconstructRequired;
+ (void) setErrReconstructRequired:(NSError* _Nullable)v;

/**
 * ErrShardNoData will be returned if there are no shards,
or if the length of all shards is zero.
 */
+ (NSError* _Nullable) errShardNoData;
+ (void) setErrShardNoData:(NSError* _Nullable)v;

/**
 * ErrShardSize is returned if shard length isn't the same for all
shards.
 */
+ (NSError* _Nullable) errShardSize;
+ (void) setErrShardSize:(NSError* _Nullable)v;

/**
 * ErrShortData will be returned by Split(), if there isn't enough data
to fill the number of shards.
 */
+ (NSError* _Nullable) errShortData;
+ (void) setErrShortData:(NSError* _Nullable)v;

/**
 * ErrTooFewShards is returned if too few shards where given to
Encode/Verify/Reconstruct/Update. It will also be returned from Reconstruct
if there were too few shards to reconstruct the missing data.
 */
+ (NSError* _Nullable) errTooFewShards;
+ (void) setErrTooFewShards:(NSError* _Nullable)v;

@end

// skipped function New with unsupported parameter or return types


/**
 * NewBytesArray creates an empty BytesArray with length n.
 */
FOUNDATION_EXPORT ReedsolomonBytesArray* _Nullable ReedsolomonNewBytesArray(long n);

/**
 * NewDefault wraps New with deafult options to be gomobile compatible.
 */
FOUNDATION_EXPORT id<ReedsolomonEncoder> _Nullable ReedsolomonNewDefault(long dataShards, long parityShards, NSError* _Nullable* _Nullable error);

// skipped function NewStream with unsupported parameter or return types


// skipped function NewStreamC with unsupported parameter or return types


// skipped function WithAutoGoroutines with unsupported parameter or return types


// skipped function WithCauchyMatrix with unsupported parameter or return types


// skipped function WithConcurrentStreamReads with unsupported parameter or return types


// skipped function WithConcurrentStreamWrites with unsupported parameter or return types


// skipped function WithConcurrentStreams with unsupported parameter or return types


// skipped function WithFastOneParityMatrix with unsupported parameter or return types


// skipped function WithInversionCache with unsupported parameter or return types


// skipped function WithMaxGoroutines with unsupported parameter or return types


// skipped function WithMinSplitSize with unsupported parameter or return types


// skipped function WithPAR1Matrix with unsupported parameter or return types


// skipped function WithStreamBlockSize with unsupported parameter or return types


@class ReedsolomonEncoder;

@class ReedsolomonStreamEncoder;

/**
 * Encoder is an interface to encode Reed-Salomon parity sets for your data.
 */
@interface ReedsolomonEncoder : NSObject <goSeqRefInterface, ReedsolomonEncoder> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
// skipped method Encoder.Encode with unsupported parameter or return types

/**
 * EncodeBytesArray is a gomobile compatible wrap of Encode.
 */
- (BOOL)encodeBytesArray:(ReedsolomonBytesArray* _Nullable)shards error:(NSError* _Nullable* _Nullable)error;
// skipped method Encoder.Join with unsupported parameter or return types

/**
 * JoinBytesArray is a gomobile compatible wrap of Join, where len(dst) will
be used as outSize.
 */
- (BOOL)joinBytesArray:(NSData* _Nullable)dst shards:(ReedsolomonBytesArray* _Nullable)shards error:(NSError* _Nullable* _Nullable)error;
// skipped method Encoder.Reconstruct with unsupported parameter or return types

/**
 * ReconstructBytesArray is a gomobile compatible wrap of Reconstruct.
 */
- (BOOL)reconstructBytesArray:(ReedsolomonBytesArray* _Nullable)shards error:(NSError* _Nullable* _Nullable)error;
// skipped method Encoder.ReconstructData with unsupported parameter or return types

/**
 * ReconstructDataBytesArray is a gomobile compatible wrap of ReconstructData.
 */
- (BOOL)reconstructDataBytesArray:(ReedsolomonBytesArray* _Nullable)shards error:(NSError* _Nullable* _Nullable)error;
// skipped method Encoder.Split with unsupported parameter or return types

/**
 * SplitBytesArray is a gomobile compatible wrap of Split.
 */
- (ReedsolomonBytesArray* _Nullable)splitBytesArray:(NSData* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
// skipped method Encoder.Update with unsupported parameter or return types

/**
 * UpdateBytesArray is a gomobile compatible wrap of Update.
 */
- (BOOL)updateBytesArray:(ReedsolomonBytesArray* _Nullable)shards newDatashards:(ReedsolomonBytesArray* _Nullable)newDatashards error:(NSError* _Nullable* _Nullable)error;
// skipped method Encoder.Verify with unsupported parameter or return types

/**
 * VerifyBytesArray is a gomobile compatible wrap of Verify.
 */
- (BOOL)verifyBytesArray:(ReedsolomonBytesArray* _Nullable)shards ret0_:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * StreamEncoder is an interface to encode Reed-Salomon parity sets for your data.
It provides a fully streaming interface, and processes data in blocks of up to 4MB.

For small shard sizes, 10MB and below, it is recommended to use the in-memory interface,
since the streaming interface has a start up overhead.

For all operations, no readers and writers should not assume any order/size of
individual reads/writes.

For usage examples, see "stream-encoder.go" and "streamdecoder.go" in the examples
folder.
 */
@interface ReedsolomonStreamEncoder : NSObject <goSeqRefInterface, ReedsolomonStreamEncoder> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
// skipped method StreamEncoder.Encode with unsupported parameter or return types

// skipped method StreamEncoder.Join with unsupported parameter or return types

// skipped method StreamEncoder.Reconstruct with unsupported parameter or return types

// skipped method StreamEncoder.Split with unsupported parameter or return types

// skipped method StreamEncoder.Verify with unsupported parameter or return types

@end

#endif
