// Objective-C API for talking to github.com/nknorg/nkn-sdk-go Go package.
//   gobind -lang=objc github.com/nknorg/nkn-sdk-go
//
// File is generated by gobind. Do not edit.

#ifndef __Nkn_H__
#define __Nkn_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class NknAccount;
@class NknAmount;
@class NknClient;
@class NknClientAddr;
@class NknClientConfig;
@class NknDialConfig;
@class NknMessage;
@class NknMessageConfig;
@class NknMultiClient;
@class NknNanoPay;
@class NknNanoPayClaimer;
@class NknNode;
@class NknOnConnect;
@class NknOnError;
@class NknOnMessage;
@class NknRPCConfig;
@class NknRegistrant;
@class NknScryptConfig;
@class NknStringArray;
@class NknStringMap;
@class NknSubscribers;
@class NknSubscription;
@class NknTransactionConfig;
@class NknWallet;
@class NknWalletConfig;
@protocol NknErrorWithCode;
@class NknErrorWithCode;
@protocol NknOnConnectFunc;
@class NknOnConnectFunc;
@protocol NknOnErrorFunc;
@class NknOnErrorFunc;
@protocol NknOnMessageFunc;
@class NknOnMessageFunc;
@protocol NknRPCConfigInterface;
@class NknRPCConfigInterface;
@protocol NknStringMapFunc;
@class NknStringMapFunc;

@protocol NknErrorWithCode <NSObject>
- (int32_t)code;
- (NSString* _Nonnull)error;
@end

@protocol NknOnConnectFunc <NSObject>
- (void)onConnect:(NknNode* _Nullable)p0;
@end

@protocol NknOnErrorFunc <NSObject>
- (void)onError:(NSError* _Nullable)p0;
@end

@protocol NknOnMessageFunc <NSObject>
- (void)onMessage:(NknMessage* _Nullable)p0;
@end

@protocol NknRPCConfigInterface <NSObject>
- (NSString* _Nonnull)getRandomSeedRPCServerAddr;
@end

@protocol NknStringMapFunc <NSObject>
- (BOOL)onVisit:(NSString* _Nullable)p0 p1:(NSString* _Nullable)p1;
@end

/**
 * Account is a wrapper type for gomobile compatibility.
 */
@interface NknAccount : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewAccount creates an account from secret seed. Seed length should be 32 or
0. If seed has zero length (including nil), a random seed will be generated.
 */
- (nullable instancetype)init:(NSData* _Nullable)seed;
// skipped field Account.Account with unsupported type: *github.com/nknorg/nkn/v2/vault.Account

- (NSData* _Nullable)privKey;
/**
 * PubKey returns the public key of the account.
 */
- (NSData* _Nullable)pubKey;
/**
 * Seed returns the secret seed of the account. Secret seed can be used to
create client/wallet with the same key pair and should be kept secret and
safe.
 */
- (NSData* _Nullable)seed;
/**
 * WalletAddress returns the wallet address of the account.
 */
- (NSString* _Nonnull)walletAddress;
@end

/**
 * Amount is a wrapper type for gomobile compatibility.
 */
@interface NknAmount : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewAmount creates an amount from string in unit of NKN. For example, "0.1"
will be parsed as 0.1 NKN.
 */
- (nullable instancetype)init:(NSString* _Nullable)s;
// skipped field Amount.Fixed64 with unsupported type: github.com/nknorg/nkn/v2/common.Fixed64

// skipped method Amount.Deserialize with unsupported parameter or return types

- (int64_t)getData;
// skipped method Amount.Serialize with unsupported parameter or return types

- (NSString* _Nonnull)string;
// skipped method Amount.ToFixed64 with unsupported parameter or return types

@end

/**
 * Client sends and receives data between any NKN clients regardless their
network condition without setting up a server or relying on any third party
services. Data are end to end encrypted by default. Typically you might want
to use multiclient instead of using client directly.
 */
@interface NknClient : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewClient creates a client with an account, an optional identifier, and a
optional client config. For any zero value field in config, the default
client config value will be used. If config is nil, the default client config
will be used.
 */
- (nullable instancetype)init:(NknAccount* _Nullable)account identifier:(NSString* _Nullable)identifier config:(NknClientConfig* _Nullable)config;
@property (nonatomic) NknOnConnect* _Nullable onConnect;
@property (nonatomic) NknOnMessage* _Nullable onMessage;
/**
 * Account returns the account of the client.
 */
- (NknAccount* _Nullable)account;
/**
 * Address returns the NKN client address of the client. Client address is in
the form of
  identifier.pubKeyHex
if identifier is not an empty string, or
  pubKeyHex
if identifier is an empty string.

Note that client address is different from wallet address using the same key
pair (account). Wallet address can be computed from client address, but NOT
vice versa.
 */
- (NSString* _Nonnull)address;
/**
 * Balance is the same as package level GetBalance, but using connected node as
the RPC server, followed by this client's SeedRPCServerAddr if failed.
 */
- (NknAmount* _Nullable)balance:(NSError* _Nullable* _Nullable)error;
/**
 * BalanceByAddress is the same as package level GetBalance, but using connected
node as the RPC server, followed by this client's SeedRPCServerAddr if
failed.
 */
- (NknAmount* _Nullable)balanceByAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * Close closes the client.
 */
- (BOOL)close:(NSError* _Nullable* _Nullable)error;
/**
 * DeleteName is a shortcut for DeleteName using this client as SignerRPCClient.
 */
- (NSString* _Nonnull)deleteName:(NSString* _Nullable)name config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
// skipped method Client.GetConn with unsupported parameter or return types

/**
 * GetHeight is the same as package level GetHeight, but using connected node as
the RPC server, followed by this client's SeedRPCServerAddr if failed.
 */
- (BOOL)getHeight:(int32_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * GetNode returns the node that client is currently connected to.
 */
- (NknNode* _Nullable)getNode;
/**
 * GetNonce is the same as package level GetNonce, but using connected node as
the RPC server, followed by this client's SeedRPCServerAddr if failed.
 */
- (BOOL)getNonce:(BOOL)txPool ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * GetNonceByAddress is the same as package level GetNonce, but using connected
node as the RPC server, followed by this client's SeedRPCServerAddr if
failed.
 */
- (BOOL)getNonceByAddress:(NSString* _Nullable)address txPool:(BOOL)txPool ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * GetRegistrant is the same as package level GetRegistrant, but using connected
node as the RPC server, followed by this client's SeedRPCServerAddr if
failed.
 */
- (NknRegistrant* _Nullable)getRegistrant:(NSString* _Nullable)name error:(NSError* _Nullable* _Nullable)error;
/**
 * GetSubscribers is the same as package level GetSubscribers, but using
connected node as the RPC server, followed by this client's SeedRPCServerAddr
if failed.
 */
- (NknSubscribers* _Nullable)getSubscribers:(NSString* _Nullable)topic offset:(long)offset limit:(long)limit meta:(BOOL)meta txPool:(BOOL)txPool error:(NSError* _Nullable* _Nullable)error;
/**
 * GetSubscribersCount is the same as package level GetSubscribersCount, but
using connected node as the RPC server, followed by this client's
SeedRPCServerAddr if failed.
 */
- (BOOL)getSubscribersCount:(NSString* _Nullable)topic ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * GetSubscription is the same as package level GetSubscription, but using
connected node as the RPC server, followed by this client's SeedRPCServerAddr
if failed.
 */
- (NknSubscription* _Nullable)getSubscription:(NSString* _Nullable)topic subscriber:(NSString* _Nullable)subscriber error:(NSError* _Nullable* _Nullable)error;
/**
 * IsClosed returns whether the client is closed and should not be used anymore.
 */
- (BOOL)isClosed;
/**
 * NewNanoPay is a shortcut for NewNanoPay using this client's wallet address as
sender.

Duration is changed to signed int for gomobile compatibility.
 */
- (NknNanoPay* _Nullable)newNanoPay:(NSString* _Nullable)recipientAddress fee:(NSString* _Nullable)fee duration:(long)duration error:(NSError* _Nullable* _Nullable)error;
/**
 * NewNanoPayClaimer is a shortcut for NewNanoPayClaimer using this client as
RPC client.
 */
- (NknNanoPayClaimer* _Nullable)newNanoPayClaimer:(NSString* _Nullable)recipientAddress claimIntervalMs:(int32_t)claimIntervalMs onError:(NknOnError* _Nullable)onError error:(NSError* _Nullable* _Nullable)error;
/**
 * PubKey returns the public key of the client.
 */
- (NSData* _Nullable)pubKey;
// skipped method Client.Publish with unsupported parameter or return types

/**
 * PublishBinary is a wrapper of Publish without interface type for gomobile
compatibility.
 */
- (BOOL)publishBinary:(NSString* _Nullable)topic data:(NSData* _Nullable)data config:(NknMessageConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * PublishText is a wrapper of Publish without interface type for gomobile
compatibility.
 */
- (BOOL)publishText:(NSString* _Nullable)topic data:(NSString* _Nullable)data config:(NknMessageConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * Reconnect forces the client to find node and connect again.
 */
- (void)reconnect;
/**
 * RegisterName is a shortcut for RegisterName using this client as
SignerRPCClient.
 */
- (NSString* _Nonnull)registerName:(NSString* _Nullable)name config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * Seed returns the secret seed of the client. Secret seed can be used to create
client/wallet with the same key pair and should be kept secret and safe.
 */
- (NSData* _Nullable)seed;
// skipped method Client.Send with unsupported parameter or return types

/**
 * SendBinary is a wrapper of Send without interface type for gomobile
compatibility.
 */
- (NknOnMessage* _Nullable)sendBinary:(NknStringArray* _Nullable)dests data:(NSData* _Nullable)data config:(NknMessageConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
// skipped method Client.SendRawTransaction with unsupported parameter or return types

/**
 * SendText is a wrapper of Send without interface type for gomobile
compatibility.
 */
- (NknOnMessage* _Nullable)sendText:(NknStringArray* _Nullable)dests data:(NSString* _Nullable)data config:(NknMessageConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
// skipped method Client.SetWriteDeadline with unsupported parameter or return types

// skipped method Client.SignTransaction with unsupported parameter or return types

/**
 * Subscribe is a shortcut for Subscribe using this client as SignerRPCClient.

Duration is changed to signed int for gomobile compatibility.
 */
- (NSString* _Nonnull)subscribe:(NSString* _Nullable)identifier topic:(NSString* _Nullable)topic duration:(long)duration meta:(NSString* _Nullable)meta config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * Transfer is a shortcut for Transfer using this client as SignerRPCClient.
 */
- (NSString* _Nonnull)transfer:(NSString* _Nullable)address amount:(NSString* _Nullable)amount config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * TransferName is a shortcut for TransferName using this client as
SignerRPCClient.
 */
- (NSString* _Nonnull)transferName:(NSString* _Nullable)name recipientPubKey:(NSData* _Nullable)recipientPubKey config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * Unsubscribe is a shortcut for Unsubscribe using this client as
SignerRPCClient.
 */
- (NSString* _Nonnull)unsubscribe:(NSString* _Nullable)identifier topic:(NSString* _Nullable)topic config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * ClientAddr represents NKN client address. It implements net.Addr interface.
 */
@interface NknClientAddr : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewClientAddr creates a ClientAddr from a client address string.
 */
- (nullable instancetype)init:(NSString* _Nullable)addr;
/**
 * Network returns "nkn"
 */
- (NSString* _Nonnull)network;
/**
 * String returns the NKN client address string.
 */
- (NSString* _Nonnull)string;
@end

/**
 * ClientConfig is the client configuration.
 */
@interface NknClientConfig : NSObject <goSeqRefInterface, NknRPCConfigInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NknStringArray* _Nullable seedRPCServerAddr;
@property (nonatomic) int32_t msgChanLen;
@property (nonatomic) int32_t connectRetries;
@property (nonatomic) int32_t msgCacheExpiration;
@property (nonatomic) int32_t msgCacheCleanupInterval;
@property (nonatomic) int32_t wsHandshakeTimeout;
@property (nonatomic) int32_t wsWriteTimeout;
@property (nonatomic) int32_t minReconnectInterval;
@property (nonatomic) int32_t maxReconnectInterval;
@property (nonatomic) NknMessageConfig* _Nullable messageConfig;
// skipped field ClientConfig.SessionConfig with unsupported type: *github.com/nknorg/ncp-go.Config

/**
 * GetRandomSeedRPCServerAddr returns a random seed rpc server address from the
client config.
 */
- (NSString* _Nonnull)getRandomSeedRPCServerAddr;
@end

/**
 * DialConfig is the dial config for session.
 */
@interface NknDialConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) int32_t dialTimeout;
// skipped field DialConfig.SessionConfig with unsupported type: *github.com/nknorg/ncp-go.Config

@end

/**
 * Message contains the info of received message.
 */
@interface NknMessage : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull src;
@property (nonatomic) NSData* _Nullable data;
@property (nonatomic) int32_t type;
@property (nonatomic) BOOL encrypted;
@property (nonatomic) NSData* _Nullable messageID;
@property (nonatomic) BOOL noReply;
// skipped method Message.Reply with unsupported parameter or return types

/**
 * ReplyBinary is a wrapper of Reply without interface type for gomobile
compatibility.
 */
- (BOOL)replyBinary:(NSData* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
/**
 * ReplyText is a wrapper of Reply without interface type for gomobile
compatibility.
 */
- (BOOL)replyText:(NSString* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * MessageConfig is the config for sending messages.
 */
@interface NknMessageConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) BOOL unencrypted;
@property (nonatomic) BOOL noReply;
@property (nonatomic) int32_t maxHoldingSeconds;
@property (nonatomic) NSData* _Nullable messageID;
/**
 * for publish
 */
@property (nonatomic) BOOL txPool;
@property (nonatomic) int32_t offset;
@property (nonatomic) int32_t limit;
@end

/**
 * MultiClient sends and receives data using multiple NKN clients concurrently
to improve reliability and latency. In addition, it supports session mode, a
reliable streaming protocol similar to TCP based on ncp
(https://github.com/nknorg/ncp-go).
 */
@interface NknMultiClient : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewMultiClient creates a multiclient with an account, an optional identifier,
number of sub clients to create, whether to create original client without
identifier prefix, and a optional client config that will be applied to all
clients created. For any zero value field in config, the default client
config value will be used. If config is nil, the default client config will
be used.
 */
- (nullable instancetype)init:(NknAccount* _Nullable)account baseIdentifier:(NSString* _Nullable)baseIdentifier numSubClients:(long)numSubClients originalClient:(BOOL)originalClient config:(NknClientConfig* _Nullable)config;
@property (nonatomic) NknOnConnect* _Nullable onConnect;
@property (nonatomic) NknOnMessage* _Nullable onMessage;
// skipped method MultiClient.Accept with unsupported parameter or return types

// skipped method MultiClient.AcceptSession with unsupported parameter or return types

/**
 * Account returns the account of the multiclient.
 */
- (NknAccount* _Nullable)account;
// skipped method MultiClient.Addr with unsupported parameter or return types

/**
 * Address returns the NKN client address of the multiclient. Client address is
in the form of
  identifier.pubKeyHex
if identifier is not an empty string, or
  pubKeyHex
if identifier is an empty string.

Note that client address is different from wallet address using the same key
pair (account). Wallet address can be computed from client address, but NOT
vice versa.
 */
- (NSString* _Nonnull)address;
/**
 * Balance is the same as package level GetBalance, but using connected node as
the RPC server, followed by this multiclient's SeedRPCServerAddr if failed.
 */
- (NknAmount* _Nullable)balance:(NSError* _Nullable* _Nullable)error;
/**
 * BalanceByAddress is the same as package level GetBalance, but using connected
node as the RPC server, followed by this multiclient's SeedRPCServerAddr if
failed.
 */
- (NknAmount* _Nullable)balanceByAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * Close closes the multiclient, including all clients it created and all
sessions dialed and accepted. Calling close multiple times is allowed and
will not have any effect.
 */
- (BOOL)close:(NSError* _Nullable* _Nullable)error;
/**
 * DeleteName is a shortcut for DeleteName using this multiclient as
SignerRPCClient.
 */
- (NSString* _Nonnull)deleteName:(NSString* _Nullable)name config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
// skipped method MultiClient.Dial with unsupported parameter or return types

// skipped method MultiClient.DialSession with unsupported parameter or return types

// skipped method MultiClient.DialWithConfig with unsupported parameter or return types

/**
 * GetClient returns a client with a given index.
 */
- (NknClient* _Nullable)getClient:(long)i;
// skipped method MultiClient.GetClients with unsupported parameter or return types

/**
 * GetDefaultClient returns the default client, which is the client with
smallest index.
 */
- (NknClient* _Nullable)getDefaultClient;
/**
 * GetHeight is the same as package level GetHeight, but using connected node as
the RPC server, followed by this multiclient's SeedRPCServerAddr if failed.
 */
- (BOOL)getHeight:(int32_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * GetNonce is the same as package level GetNonce, but using connected node as
the RPC server, followed by this multiclient's SeedRPCServerAddr if failed.
 */
- (BOOL)getNonce:(BOOL)txPool ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * GetNonceByAddress is the same as package level GetNonce, but using connected
node as the RPC server, followed by this multiclient's SeedRPCServerAddr if
failed.
 */
- (BOOL)getNonceByAddress:(NSString* _Nullable)address txPool:(BOOL)txPool ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * GetRegistrant is the same as package level GetRegistrant, but using connected
node as the RPC server, followed by this multiclient's SeedRPCServerAddr if
failed.
 */
- (NknRegistrant* _Nullable)getRegistrant:(NSString* _Nullable)name error:(NSError* _Nullable* _Nullable)error;
/**
 * GetSubscribers is the same as package level GetSubscribers, but using
connected node as the RPC server, followed by this multiclient's
SeedRPCServerAddr if failed.
 */
- (NknSubscribers* _Nullable)getSubscribers:(NSString* _Nullable)topic offset:(long)offset limit:(long)limit meta:(BOOL)meta txPool:(BOOL)txPool error:(NSError* _Nullable* _Nullable)error;
/**
 * GetSubscribersCount is the same as package level GetSubscribersCount, but
using connected node as the RPC server, followed by this multiclient's
SeedRPCServerAddr if failed.
 */
- (BOOL)getSubscribersCount:(NSString* _Nullable)topic ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * GetSubscription is the same as package level GetSubscription, but using
connected node as the RPC server, followed by this multiclient's
SeedRPCServerAddr if failed.
 */
- (NknSubscription* _Nullable)getSubscription:(NSString* _Nullable)topic subscriber:(NSString* _Nullable)subscriber error:(NSError* _Nullable* _Nullable)error;
/**
 * IsClosed returns whether this multiclient is closed.
 */
- (BOOL)isClosed;
/**
 * Listen will make multiclient start accepting sessions from address that
matches any of the given regular expressions. If addrsRe is nil, any address
will be accepted. Each function call will overwrite previous listening
addresses.
 */
- (BOOL)listen:(NknStringArray* _Nullable)addrsRe error:(NSError* _Nullable* _Nullable)error;
/**
 * NewNanoPay is a shortcut for NewNanoPay using this multiclient's wallet
address as sender.

Duration is changed to signed int for gomobile compatibility.
 */
- (NknNanoPay* _Nullable)newNanoPay:(NSString* _Nullable)recipientAddress fee:(NSString* _Nullable)fee duration:(long)duration error:(NSError* _Nullable* _Nullable)error;
/**
 * NewNanoPayClaimer is a shortcut for NewNanoPayClaimer using this multiclient
as RPC client.
 */
- (NknNanoPayClaimer* _Nullable)newNanoPayClaimer:(NSString* _Nullable)recipientAddress claimIntervalMs:(int32_t)claimIntervalMs onError:(NknOnError* _Nullable)onError error:(NSError* _Nullable* _Nullable)error;
/**
 * PubKey returns the public key of the multiclient.
 */
- (NSData* _Nullable)pubKey;
// skipped method MultiClient.Publish with unsupported parameter or return types

/**
 * PublishBinary is a wrapper of Publish without interface type for gomobile
compatibility.
 */
- (BOOL)publishBinary:(NSString* _Nullable)topic data:(NSData* _Nullable)data config:(NknMessageConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * PublishText is a wrapper of Publish without interface type for gomobile
compatibility.
 */
- (BOOL)publishText:(NSString* _Nullable)topic data:(NSString* _Nullable)data config:(NknMessageConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * Reconnect forces all clients to find node and connect again.
 */
- (void)reconnect;
/**
 * RegisterName is a shortcut for RegisterName using this multiclient as
SignerRPCClient.
 */
- (NSString* _Nonnull)registerName:(NSString* _Nullable)name config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * Seed returns the secret seed of the multiclient. Secret seed can be used to
create client/wallet with the same key pair and should be kept secret and
safe.
 */
- (NSData* _Nullable)seed;
// skipped method MultiClient.Send with unsupported parameter or return types

/**
 * SendBinary is a wrapper of Send without interface type for gomobile
compatibility.
 */
- (NknOnMessage* _Nullable)sendBinary:(NknStringArray* _Nullable)dests data:(NSData* _Nullable)data config:(NknMessageConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * SendBinaryWithClient is a wrapper of SendWithClient without interface type
for gomobile compatibility.
 */
- (NknOnMessage* _Nullable)sendBinaryWithClient:(long)clientID dests:(NknStringArray* _Nullable)dests data:(NSData* _Nullable)data config:(NknMessageConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
// skipped method MultiClient.SendRawTransaction with unsupported parameter or return types

/**
 * SendText is a wrapper of Send without interface type for gomobile
compatibility.
 */
- (NknOnMessage* _Nullable)sendText:(NknStringArray* _Nullable)dests data:(NSString* _Nullable)data config:(NknMessageConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * SendTextWithClient is a wrapper of SendWithClient without interface type for
gomobile compatibility.
 */
- (NknOnMessage* _Nullable)sendTextWithClient:(long)clientID dests:(NknStringArray* _Nullable)dests data:(NSString* _Nullable)data config:(NknMessageConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
// skipped method MultiClient.SendWithClient with unsupported parameter or return types

// skipped method MultiClient.SignTransaction with unsupported parameter or return types

/**
 * Subscribe is a shortcut for Subscribe using this multiclient as
SignerRPCClient.

Duration is changed to signed int for gomobile compatibility.
 */
- (NSString* _Nonnull)subscribe:(NSString* _Nullable)identifier topic:(NSString* _Nullable)topic duration:(long)duration meta:(NSString* _Nullable)meta config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * Transfer is a shortcut for Transfer using this multiclient as
SignerRPCClient.
 */
- (NSString* _Nonnull)transfer:(NSString* _Nullable)address amount:(NSString* _Nullable)amount config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * TransferName is a shortcut for TransferName using this multiclient as
SignerRPCClient.
 */
- (NSString* _Nonnull)transferName:(NSString* _Nullable)name recipientPubKey:(NSData* _Nullable)recipientPubKey config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * Unsubscribe is a shortcut for Unsubscribe using this multiclient as
SignerRPCClient.
 */
- (NSString* _Nonnull)unsubscribe:(NSString* _Nullable)identifier topic:(NSString* _Nullable)topic config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * NanoPay is a nano payment channel between a payer and recipient where the
payment amount can increase monotonically.
 */
@interface NknNanoPay : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped method NanoPay.IncrementAmount with unsupported parameter or return types

/**
 * Recipient returns the recipient wallet address.
 */
- (NSString* _Nonnull)recipient;
@end

/**
 * NanoPayClaimer accepts NanoPay updates and send the latest state to
blockchain periodically.
 */
@interface NknNanoPayClaimer : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Amount returns the total amount (including previously claimed and pending
amount) of this NanoPayClaimer.
 */
- (NknAmount* _Nullable)amount;
// skipped method NanoPayClaimer.Claim with unsupported parameter or return types

/**
 * Close closes the NanoPayClaimer.
 */
- (BOOL)close:(NSError* _Nullable* _Nullable)error;
/**
 * Flush sends the current latest NanoPay state to chain.
 */
- (BOOL)flush:(NSError* _Nullable* _Nullable)error;
/**
 * IsClosed returns whether the NanoPayClaimer is closed.
 */
- (BOOL)isClosed;
/**
 * Recipient returns the NanoPayClaimer's recipient wallet address.
 */
- (NSString* _Nonnull)recipient;
@end

/**
 * Node struct contains the information of the node that a client connects to.
 */
@interface NknNode : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull addr;
@property (nonatomic) NSString* _Nonnull rpcAddr;
@property (nonatomic) NSString* _Nonnull pubKey;
@property (nonatomic) NSString* _Nonnull id_;
@end

/**
 * OnConnect is a wrapper type for gomobile compatibility.
 */
@interface NknOnConnect : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewOnConnect creates an OnConnect channel with a channel size and callback
function.
 */
- (nullable instancetype)init:(long)size cb:(id<NknOnConnectFunc> _Nullable)cb;
// skipped field OnConnect.C with unsupported type: chan *github.com/nknorg/nkn-sdk-go.Node

@property (nonatomic) id<NknOnConnectFunc> _Nullable callback;
/**
 * Next waits and returns the next element from the channel.
 */
- (NknNode* _Nullable)next;
@end

/**
 * OnError is a wrapper type for gomobile compatibility.
 */
@interface NknOnError : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewOnError creates an OnError channel with a channel size and callback
function.
 */
- (nullable instancetype)init:(long)size cb:(id<NknOnErrorFunc> _Nullable)cb;
// skipped field OnError.C with unsupported type: chan error

@property (nonatomic) id<NknOnErrorFunc> _Nullable callback;
/**
 * Next waits and returns the next element from the channel.
 */
- (BOOL)next:(NSError* _Nullable* _Nullable)error;
@end

/**
 * OnMessage is a wrapper type for gomobile compatibility.
 */
@interface NknOnMessage : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewOnMessage creates an OnMessage channel with a channel size and callback
function.
 */
- (nullable instancetype)init:(long)size cb:(id<NknOnMessageFunc> _Nullable)cb;
// skipped field OnMessage.C with unsupported type: chan *github.com/nknorg/nkn-sdk-go.Message

@property (nonatomic) id<NknOnMessageFunc> _Nullable callback;
/**
 * Next waits and returns the next element from the channel.
 */
- (NknMessage* _Nullable)next;
/**
 * Next waits and returns the next element from the channel, timeout in millisecond.
 */
- (NknMessage* _Nullable)nextWithTimeout:(int32_t)timeout;
@end

/**
 * RPCConfig is the rpc call configuration.
 */
@interface NknRPCConfig : NSObject <goSeqRefInterface, NknRPCConfigInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NknStringArray* _Nullable seedRPCServerAddr;
/**
 * GetRandomSeedRPCServerAddr returns a random seed rpc server address from the
rpc config.
 */
- (NSString* _Nonnull)getRandomSeedRPCServerAddr;
@end

/**
 * Registrant contains the information of a name registrant
 */
@interface NknRegistrant : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull registrant;
@property (nonatomic) int32_t expiresAt;
@end

/**
 * ScryptConfig is the scrypt configuration.
 */
@interface NknScryptConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSData* _Nullable salt;
@property (nonatomic) long n;
@property (nonatomic) long r;
@property (nonatomic) long p;
@end

/**
 * StringArray is a wrapper type for gomobile compatibility. StringArray is not
protected by lock and should not be read and write at the same time.
 */
@interface NknStringArray : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
// skipped constructor StringArray.NewStringArray with unsupported parameter or return types

/**
 * NewStringArrayFromString creates a StringArray from a single string input.
The input string will be split to string array by whitespace.
 */
- (nullable instancetype)initFromString:(NSString* _Nullable)s;
/**
 * Append adds an element to the string array.
 */
- (void)append:(NSString* _Nullable)s;
// skipped method StringArray.Elems with unsupported parameter or return types

/**
 * Len returns the string array length.
 */
- (long)len;
@end

/**
 * StringMap is a wrapper type for gomobile compatibility. StringMap is not
protected by lock and should not be read and write at the same time.
 */
@interface NknStringMap : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
// skipped constructor StringMap.NewStringMap with unsupported parameter or return types

/**
 * NewStringMapWithSize creates an empty StringMap with a given size.
 */
- (nullable instancetype)initWithSize:(long)size;
// skipped field StringMap.Map with unsupported type: map[string]string

/**
 * Delete deletes a key and its value from the map.
 */
- (void)delete:(NSString* _Nullable)key;
/**
 * Get returns the value of a key, or ErrKeyNotInMap if key does not exist.
 */
- (NSString* _Nonnull)get:(NSString* _Nullable)key error:(NSError* _Nullable* _Nullable)error;
/**
 * Len returns the number of elements in the map.
 */
- (long)len;
/**
 * Range iterates over the StringMap and call the OnVisit callback function with
each element in the map. If the OnVisit function returns false, the iterator
will stop and no longer visit the rest elements.
 */
- (void)range:(id<NknStringMapFunc> _Nullable)cb;
/**
 * Set sets the value of a key to a value.
 */
- (void)set:(NSString* _Nullable)key value:(NSString* _Nullable)value;
@end

/**
 * Subscribers is a wrapper type for gomobile compatibility.
 */
@interface NknSubscribers : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NknStringMap* _Nullable subscribers;
@property (nonatomic) NknStringMap* _Nullable subscribersInTxPool;
@end

/**
 * Subscription contains the information of a subscriber to a topic.
 */
@interface NknSubscription : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull meta;
@property (nonatomic) int32_t expiresAt;
@end

/**
 * TransactionConfig is the config for making a transaction.
 */
@interface NknTransactionConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull fee;
@property (nonatomic) int64_t nonce;
@property (nonatomic) NSData* _Nullable attributes;
@end

/**
 * Wallet manages assets, query state from blockchain, and send transactions to
blockchain.
 */
@interface NknWallet : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewWallet creates a wallet from an account and an optional config. For any
zero value field in config, the default wallet config value will be used. If
config is nil, the default wallet config will be used. However, it is
strongly recommended to use non-empty password in config to protect the
wallet, otherwise anyone can recover the wallet and control all assets in the
wallet from the generated wallet JSON.
 */
- (nullable instancetype)init:(NknAccount* _Nullable)account config:(NknWalletConfig* _Nullable)config;
/**
 * Account returns the account of the wallet.
 */
- (NknAccount* _Nullable)account;
/**
 * Address returns the NKN wallet address of the wallet.
 */
- (NSString* _Nonnull)address;
/**
 * Balance is the same as package level GetBalance, but using this wallet's
SeedRPCServerAddr.
 */
- (NknAmount* _Nullable)balance:(NSError* _Nullable* _Nullable)error;
/**
 * BalanceByAddress is the same as package level GetBalance, but using this
wallet's SeedRPCServerAddr.
 */
- (NknAmount* _Nullable)balanceByAddress:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * DeleteName is a shortcut for DeleteName using this wallet as SignerRPCClient.
 */
- (NSString* _Nonnull)deleteName:(NSString* _Nullable)name config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * GetHeight is the same as package level GetHeight, but using this wallet's
SeedRPCServerAddr.
 */
- (BOOL)getHeight:(int32_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * GetNonce is the same as package level GetNonce, but using this wallet's
SeedRPCServerAddr.
 */
- (BOOL)getNonce:(BOOL)txPool ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * GetNonceByAddress is the same as package level GetNonce, but using this
wallet's SeedRPCServerAddr.
 */
- (BOOL)getNonceByAddress:(NSString* _Nullable)address txPool:(BOOL)txPool ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * GetRegistrant is the same as package level GetRegistrant, but this wallet's
SeedRPCServerAddr.
 */
- (NknRegistrant* _Nullable)getRegistrant:(NSString* _Nullable)name error:(NSError* _Nullable* _Nullable)error;
/**
 * GetSubscribers is the same as package level GetSubscribers, but using this
wallet's SeedRPCServerAddr.
 */
- (NknSubscribers* _Nullable)getSubscribers:(NSString* _Nullable)topic offset:(long)offset limit:(long)limit meta:(BOOL)meta txPool:(BOOL)txPool error:(NSError* _Nullable* _Nullable)error;
/**
 * GetSubscribersCount is the same as package level GetSubscribersCount, but
this wallet's SeedRPCServerAddr.
 */
- (BOOL)getSubscribersCount:(NSString* _Nullable)topic ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * GetSubscription is the same as package level GetSubscription, but using this
wallet's SeedRPCServerAddr.
 */
- (NknSubscription* _Nullable)getSubscription:(NSString* _Nullable)topic subscriber:(NSString* _Nullable)subscriber error:(NSError* _Nullable* _Nullable)error;
/**
 * MarshalJSON serialize the wallet to JSON string encrypted by password used to
create the wallet. The same password must be used to recover the wallet from
JSON string.
 */
- (NSData* _Nullable)marshalJSON:(NSError* _Nullable* _Nullable)error;
/**
 * NewNanoPay is a shortcut for NewNanoPay using this wallet as sender.

Duration is changed to signed int for gomobile compatibility.
 */
- (NknNanoPay* _Nullable)newNanoPay:(NSString* _Nullable)recipientAddress fee:(NSString* _Nullable)fee duration:(long)duration error:(NSError* _Nullable* _Nullable)error;
/**
 * NewNanoPayClaimer is a shortcut for NewNanoPayClaimer using this wallet as
RPC client.
 */
- (NknNanoPayClaimer* _Nullable)newNanoPayClaimer:(NSString* _Nullable)recipientAddress claimIntervalMs:(int32_t)claimIntervalMs onError:(NknOnError* _Nullable)onError error:(NSError* _Nullable* _Nullable)error;
// skipped method Wallet.ProgramHash with unsupported parameter or return types

/**
 * PubKey returns the public key of the wallet.
 */
- (NSData* _Nullable)pubKey;
/**
 * RegisterName is a shortcut for RegisterName using this wallet as
SignerRPCClient.
 */
- (NSString* _Nonnull)registerName:(NSString* _Nullable)name config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * Seed returns the secret seed of the wallet. Secret seed can be used to create
client/wallet with the same key pair and should be kept secret and safe.
 */
- (NSData* _Nullable)seed;
// skipped method Wallet.SendRawTransaction with unsupported parameter or return types

// skipped method Wallet.SignTransaction with unsupported parameter or return types

/**
 * Subscribe is a shortcut for Subscribe using this wallet as SignerRPCClient.

Duration is changed to signed int for gomobile compatibility.
 */
- (NSString* _Nonnull)subscribe:(NSString* _Nullable)identifier topic:(NSString* _Nullable)topic duration:(long)duration meta:(NSString* _Nullable)meta config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * ToJSON is a shortcut for wallet.MarshalJSON, but returns string instead of
bytes.
 */
- (NSString* _Nonnull)toJSON:(NSError* _Nullable* _Nullable)error;
/**
 * Transfer is a shortcut for Transfer using this wallet as SignerRPCClient.
 */
- (NSString* _Nonnull)transfer:(NSString* _Nullable)address amount:(NSString* _Nullable)amount config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * TransferName is a shortcut for TransferName using this wallet as
SignerRPCClient.
 */
- (NSString* _Nonnull)transferName:(NSString* _Nullable)name recipientPubKey:(NSData* _Nullable)recipientPubKey config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * Unsubscribe is a shortcut for Unsubscribe using this wallet as
SignerRPCClient.
 */
- (NSString* _Nonnull)unsubscribe:(NSString* _Nullable)identifier topic:(NSString* _Nullable)topic config:(NknTransactionConfig* _Nullable)config error:(NSError* _Nullable* _Nullable)error;
/**
 * VerifyPassword returns nil if provided password is the correct password of
this wallet.
 */
- (BOOL)verifyPassword:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * WalletConfig is the wallet configuration.
 */
@interface NknWalletConfig : NSObject <goSeqRefInterface, NknRPCConfigInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NknStringArray* _Nullable seedRPCServerAddr;
@property (nonatomic) NSString* _Nonnull password;
@property (nonatomic) NSData* _Nullable iv;
@property (nonatomic) NSData* _Nullable masterKey;
@property (nonatomic) NknScryptConfig* _Nullable scryptConfig;
/**
 * GetRandomSeedRPCServerAddr returns a random seed rpc server address from the
wallet config.
 */
- (NSString* _Nonnull)getRandomSeedRPCServerAddr;
@end

/**
 * Payload type alias for gomobile compatibility.
 */
FOUNDATION_EXPORT const int32_t NknAckType;
/**
 * AmountUnit is the inverse of the NKN precision
 */
FOUNDATION_EXPORT const int64_t NknAmountUnit;
/**
 * Payload type alias for gomobile compatibility.
 */
FOUNDATION_EXPORT const int32_t NknBinaryType;
/**
 * DefaultSessionAllowAddr is the default session allow address if none is
provided when calling listen.
 */
FOUNDATION_EXPORT NSString* _Nonnull const NknDefaultSessionAllowAddr;
/**
 * MessageIDSize is the default message id size in bytes
 */
FOUNDATION_EXPORT const int64_t NknMessageIDSize;
/**
 * MultiClientIdentifierRe is the regular expression to check whether an
identifier is a multiclient protocol identifier.
 */
FOUNDATION_EXPORT NSString* _Nonnull const NknMultiClientIdentifierRe;
/**
 * SessionIDSize is the default session id size in bytes.
 */
FOUNDATION_EXPORT const int64_t NknSessionIDSize;
/**
 * Payload type alias for gomobile compatibility.
 */
FOUNDATION_EXPORT const int32_t NknSessionType;
/**
 * Payload type alias for gomobile compatibility.
 */
FOUNDATION_EXPORT const int32_t NknTextType;

@interface Nkn : NSObject
// skipped variable DefaultClientConfig with unsupported type: github.com/nknorg/nkn-sdk-go.ClientConfig

// skipped variable DefaultDialConfig with unsupported type: github.com/nknorg/nkn-sdk-go.DialConfig

// skipped variable DefaultMessageConfig with unsupported type: github.com/nknorg/nkn-sdk-go.MessageConfig

// skipped variable DefaultRPCConfig with unsupported type: github.com/nknorg/nkn-sdk-go.RPCConfig

// skipped variable DefaultSeedRPCServerAddr with unsupported type: []string

// skipped variable DefaultSessionConfig with unsupported type: github.com/nknorg/ncp-go.Config

// skipped variable DefaultTransactionConfig with unsupported type: github.com/nknorg/nkn-sdk-go.TransactionConfig

// skipped variable DefaultWalletConfig with unsupported type: github.com/nknorg/nkn-sdk-go.WalletConfig

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errAddrNotAllowed;
+ (void) setErrAddrNotAllowed:(NSError* _Nullable)v;

// skipped variable ErrClosed with unsupported type: *github.com/nknorg/ncp-go.GenericError

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errConnectFailed;
+ (void) setErrConnectFailed:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errCreateClientFailed;
+ (void) setErrCreateClientFailed:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errDecryptFailed;
+ (void) setErrDecryptFailed:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errExpiredNanoPay;
+ (void) setErrExpiredNanoPay:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errExpiredNanoPayTxn;
+ (void) setErrExpiredNanoPayTxn:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errInsufficientBalance;
+ (void) setErrInsufficientBalance:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errInvalidAmount;
+ (void) setErrInvalidAmount:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errInvalidDestination;
+ (void) setErrInvalidDestination:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errInvalidPayloadType;
+ (void) setErrInvalidPayloadType:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errInvalidPubkey;
+ (void) setErrInvalidPubkey:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errInvalidPubkeyOrName;
+ (void) setErrInvalidPubkeyOrName:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errInvalidPubkeySize;
+ (void) setErrInvalidPubkeySize:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errInvalidWalletVersion;
+ (void) setErrInvalidWalletVersion:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errKeyNotInMap;
+ (void) setErrKeyNotInMap:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errMessageOversize;
+ (void) setErrMessageOversize:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errNanoPayClosed;
+ (void) setErrNanoPayClosed:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errNilClient;
+ (void) setErrNilClient:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errNilWebsocketConn;
+ (void) setErrNilWebsocketConn:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errNoDestination;
+ (void) setErrNoDestination:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errNotNanoPay;
+ (void) setErrNotNanoPay:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errWrongPassword;
+ (void) setErrWrongPassword:(NSError* _Nullable)v;

/**
 * Error definitions.
 */
+ (NSError* _Nullable) errWrongRecipient;
+ (void) setErrWrongRecipient:(NSError* _Nullable)v;

@end

/**
 * ClientAddrToPubKey converts a NKN client address to its public key.
 */
FOUNDATION_EXPORT NSData* _Nullable NknClientAddrToPubKey(NSString* _Nullable clientAddr, NSError* _Nullable* _Nullable error);

/**
 * ClientAddrToWalletAddr converts a NKN client address to its NKN wallet
address. It's a shortcut for calling ClientAddrToPubKey followed by
PubKeyToWalletAddr.
 */
FOUNDATION_EXPORT NSString* _Nonnull NknClientAddrToWalletAddr(NSString* _Nullable clientAddr, NSError* _Nullable* _Nullable error);

/**
 * GetBalance RPC returns the balance of a wallet address.
 */
FOUNDATION_EXPORT NknAmount* _Nullable NknGetBalance(NSString* _Nullable address, id<NknRPCConfigInterface> _Nullable config, NSError* _Nullable* _Nullable error);

/**
 * GetDefaultClientConfig returns the default client config with nil pointer
fields set to default.
 */
FOUNDATION_EXPORT NknClientConfig* _Nullable NknGetDefaultClientConfig(void);

// skipped function GetDefaultDialConfig with unsupported parameter or return types


/**
 * GetDefaultMessageConfig returns the default message config.
 */
FOUNDATION_EXPORT NknMessageConfig* _Nullable NknGetDefaultMessageConfig(void);

/**
 * GetDefaultRPCConfig returns the default rpc config with nil pointer fields
set to default.
 */
FOUNDATION_EXPORT NknRPCConfig* _Nullable NknGetDefaultRPCConfig(void);

// skipped function GetDefaultSessionConfig with unsupported parameter or return types


/**
 * GetDefaultTransactionConfig returns the default rpc config with nil pointer
fields set to default.
 */
FOUNDATION_EXPORT NknTransactionConfig* _Nullable NknGetDefaultTransactionConfig(void);

/**
 * GetDefaultWalletConfig returns the default wallet config with nil pointer
fields set to default.
 */
FOUNDATION_EXPORT NknWalletConfig* _Nullable NknGetDefaultWalletConfig(void);

/**
 * GetHeight RPC returns the latest block height.
 */
FOUNDATION_EXPORT BOOL NknGetHeight(id<NknRPCConfigInterface> _Nullable config, int32_t* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * GetNonce RPC gets the next nonce to use of an address. If txPool is false,
result only counts transactions in ledger; if txPool is true, transactions in
txPool are also counted.

Nonce is changed to signed int for gomobile compatibility.
 */
FOUNDATION_EXPORT BOOL NknGetNonce(NSString* _Nullable address, BOOL txPool, id<NknRPCConfigInterface> _Nullable config, int64_t* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * GetRegistrant RPC gets the registrant of a name.
 */
FOUNDATION_EXPORT NknRegistrant* _Nullable NknGetRegistrant(NSString* _Nullable name, id<NknRPCConfigInterface> _Nullable config, NSError* _Nullable* _Nullable error);

/**
 * GetSubscribers gets the subscribers of a topic with a offset and max number
of results (limit). If meta is true, results contain each subscriber's
metadata. If txPool is true, results contain subscribers in txPool. Enabling
this will get subscribers sooner after they send subscribe transactions, but
might affect the correctness of subscribers because transactions in txpool is
not guaranteed to be packed into a block.

Offset and limit are changed to signed int for gomobile compatibility
 */
FOUNDATION_EXPORT NknSubscribers* _Nullable NknGetSubscribers(NSString* _Nullable topic, long offset, long limit, BOOL meta, BOOL txPool, id<NknRPCConfigInterface> _Nullable config, NSError* _Nullable* _Nullable error);

/**
 * GetSubscribersCount RPC returns the number of subscribers of a topic (not
including txPool).

Count is changed to signed int for gomobile compatibility
 */
FOUNDATION_EXPORT BOOL NknGetSubscribersCount(NSString* _Nullable topic, id<NknRPCConfigInterface> _Nullable config, long* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * GetSubscription RPC gets the subscription details of a subscriber in a topic.
 */
FOUNDATION_EXPORT NknSubscription* _Nullable NknGetSubscription(NSString* _Nullable topic, NSString* _Nullable subscriber, id<NknRPCConfigInterface> _Nullable config, NSError* _Nullable* _Nullable error);

/**
 * GetWsAddr RPC gets the node that a client address should connect to using ws.
 */
FOUNDATION_EXPORT NknNode* _Nullable NknGetWsAddr(NSString* _Nullable clientAddr, id<NknRPCConfigInterface> _Nullable config, NSError* _Nullable* _Nullable error);

/**
 * GetWssAddr RPC gets the node that a client address should connect to using
wss.
 */
FOUNDATION_EXPORT NknNode* _Nullable NknGetWssAddr(NSString* _Nullable clientAddr, id<NknRPCConfigInterface> _Nullable config, NSError* _Nullable* _Nullable error);

/**
 * MergeClientConfig merges a given client config with the default client config
recursively. Any non zero value fields will override the default config.
 */
FOUNDATION_EXPORT NknClientConfig* _Nullable NknMergeClientConfig(NknClientConfig* _Nullable conf, NSError* _Nullable* _Nullable error);

// skipped function MergeDialConfig with unsupported parameter or return types


/**
 * MergeMessageConfig merges a given message config with the default message
config recursively. Any non zero value fields will override the default
config.
 */
FOUNDATION_EXPORT NknMessageConfig* _Nullable NknMergeMessageConfig(NknMessageConfig* _Nullable base, NknMessageConfig* _Nullable conf, NSError* _Nullable* _Nullable error);

/**
 * MergeTransactionConfig merges a given transaction config with the default
transaction config recursively. Any non zero value fields will override the
default config.
 */
FOUNDATION_EXPORT NknTransactionConfig* _Nullable NknMergeTransactionConfig(NknTransactionConfig* _Nullable conf, NSError* _Nullable* _Nullable error);

/**
 * MergeWalletConfig merges a given wallet config with the default wallet config
recursively. Any non zero value fields will override the default config.
 */
FOUNDATION_EXPORT NknWalletConfig* _Nullable NknMergeWalletConfig(NknWalletConfig* _Nullable conf, NSError* _Nullable* _Nullable error);

/**
 * NewAccount creates an account from secret seed. Seed length should be 32 or
0. If seed has zero length (including nil), a random seed will be generated.
 */
FOUNDATION_EXPORT NknAccount* _Nullable NknNewAccount(NSData* _Nullable seed, NSError* _Nullable* _Nullable error);

/**
 * NewAmount creates an amount from string in unit of NKN. For example, "0.1"
will be parsed as 0.1 NKN.
 */
FOUNDATION_EXPORT NknAmount* _Nullable NknNewAmount(NSString* _Nullable s, NSError* _Nullable* _Nullable error);

/**
 * NewClient creates a client with an account, an optional identifier, and a
optional client config. For any zero value field in config, the default
client config value will be used. If config is nil, the default client config
will be used.
 */
FOUNDATION_EXPORT NknClient* _Nullable NknNewClient(NknAccount* _Nullable account, NSString* _Nullable identifier, NknClientConfig* _Nullable config, NSError* _Nullable* _Nullable error);

/**
 * NewClientAddr creates a ClientAddr from a client address string.
 */
FOUNDATION_EXPORT NknClientAddr* _Nullable NknNewClientAddr(NSString* _Nullable addr);

/**
 * NewMultiClient creates a multiclient with an account, an optional identifier,
number of sub clients to create, whether to create original client without
identifier prefix, and a optional client config that will be applied to all
clients created. For any zero value field in config, the default client
config value will be used. If config is nil, the default client config will
be used.
 */
FOUNDATION_EXPORT NknMultiClient* _Nullable NknNewMultiClient(NknAccount* _Nullable account, NSString* _Nullable baseIdentifier, long numSubClients, BOOL originalClient, NknClientConfig* _Nullable config, NSError* _Nullable* _Nullable error);

/**
 * NewOnConnect creates an OnConnect channel with a channel size and callback
function.
 */
FOUNDATION_EXPORT NknOnConnect* _Nullable NknNewOnConnect(long size, id<NknOnConnectFunc> _Nullable cb);

/**
 * NewOnError creates an OnError channel with a channel size and callback
function.
 */
FOUNDATION_EXPORT NknOnError* _Nullable NknNewOnError(long size, id<NknOnErrorFunc> _Nullable cb);

/**
 * NewOnMessage creates an OnMessage channel with a channel size and callback
function.
 */
FOUNDATION_EXPORT NknOnMessage* _Nullable NknNewOnMessage(long size, id<NknOnMessageFunc> _Nullable cb);

// skipped function NewStringArray with unsupported parameter or return types


/**
 * NewStringArrayFromString creates a StringArray from a single string input.
The input string will be split to string array by whitespace.
 */
FOUNDATION_EXPORT NknStringArray* _Nullable NknNewStringArrayFromString(NSString* _Nullable s);

// skipped function NewStringMap with unsupported parameter or return types


/**
 * NewStringMapWithSize creates an empty StringMap with a given size.
 */
FOUNDATION_EXPORT NknStringMap* _Nullable NknNewStringMapWithSize(long size);

/**
 * NewWallet creates a wallet from an account and an optional config. For any
zero value field in config, the default wallet config value will be used. If
config is nil, the default wallet config will be used. However, it is
strongly recommended to use non-empty password in config to protect the
wallet, otherwise anyone can recover the wallet and control all assets in the
wallet from the generated wallet JSON.
 */
FOUNDATION_EXPORT NknWallet* _Nullable NknNewWallet(NknAccount* _Nullable account, NknWalletConfig* _Nullable config, NSError* _Nullable* _Nullable error);

/**
 * PubKeyToWalletAddr converts a public key to its NKN wallet address.
 */
FOUNDATION_EXPORT NSString* _Nonnull NknPubKeyToWalletAddr(NSData* _Nullable pubKey, NSError* _Nullable* _Nullable error);

// skipped function RPCCall with unsupported parameter or return types


/**
 * RandomBytes return cryptographically secure random bytes with given size.
 */
FOUNDATION_EXPORT NSData* _Nullable NknRandomBytes(long numBytes, NSError* _Nullable* _Nullable error);

// skipped function SendRawTransaction with unsupported parameter or return types


/**
 * VerifyWalletAddress returns error if the given wallet address is invalid.
 */
FOUNDATION_EXPORT BOOL NknVerifyWalletAddress(NSString* _Nullable address, NSError* _Nullable* _Nullable error);

/**
 * WalletFromJSON recovers a wallet from wallet JSON and wallet config. The
password in config must match the password used to create the wallet.
 */
FOUNDATION_EXPORT NknWallet* _Nullable NknWalletFromJSON(NSString* _Nullable walletJSON, NknWalletConfig* _Nullable config, NSError* _Nullable* _Nullable error);

@class NknErrorWithCode;

@class NknOnConnectFunc;

@class NknOnErrorFunc;

@class NknOnMessageFunc;

@class NknRPCConfigInterface;

@class NknStringMapFunc;

/**
 * ErrorWithCode is an error interface that implements error and Code()
 */
@interface NknErrorWithCode : NSObject <goSeqRefInterface, NknErrorWithCode> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (int32_t)code;
- (NSString* _Nonnull)error;
@end

/**
 * OnConnectFunc is a wrapper type for gomobile compatibility.
 */
@interface NknOnConnectFunc : NSObject <goSeqRefInterface, NknOnConnectFunc> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onConnect:(NknNode* _Nullable)p0;
@end

/**
 * OnErrorFunc is a wrapper type for gomobile compatibility.
 */
@interface NknOnErrorFunc : NSObject <goSeqRefInterface, NknOnErrorFunc> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onError:(NSError* _Nullable)p0;
@end

/**
 * OnMessageFunc is a wrapper type for gomobile compatibility.
 */
@interface NknOnMessageFunc : NSObject <goSeqRefInterface, NknOnMessageFunc> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onMessage:(NknMessage* _Nullable)p0;
@end

/**
 * RPCConfigInterface is the config interface for making rpc call. ClientConfig,
WalletConfig and RPCConfig all implement this interface and thus can be used
directly.
 */
@interface NknRPCConfigInterface : NSObject <goSeqRefInterface, NknRPCConfigInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (NSString* _Nonnull)getRandomSeedRPCServerAddr;
@end

/**
 * StringMapFunc is a wrapper type for gomobile compatibility.
 */
@interface NknStringMapFunc : NSObject <goSeqRefInterface, NknStringMapFunc> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BOOL)onVisit:(NSString* _Nullable)p0 p1:(NSString* _Nullable)p1;
@end

#endif
